Breve riassunto di quello che ho fatto per creare un progetto coi ProtocolBuffers:

1) ho copiato il loro file build.gradle
2) nella directory gradle/wrapper ho editato il file gradle-wrapper.properties.
La terza linea è ora questa:
distributionUrl=https\://services.gradle.org/distributions/gradle-6.7-bin.zip
Prima al posto di 6.7 c'era un'altra versione.
3) siccome non mi aveva creato la directory src, ho seguito la guida al link:
https://stackoverflow.com/questions/49710330/src-folder-not-created-when-creating-simple-intellij-java-gradle-project
in particolare leggendo la seconda risposta: "As of January 2022 with Intellij IDEA 2021.1.3 and Gradle 6.8..."
4) per andare sul sicuro, ho creato, dentro a src/main/java un nuovo package (nel mio
caso university) con dentro le classi che mi servivano.
5) ho creato una banalissima directory sotto main, ovvero src/main/proto, e qua dentro ci ho
buttato tutti i miei file proto, tipo Student.proto.
6) dopo aver scritto il message Student nel file Student.proto, ho notato che in quello che avevano
fatto loro c'era un package all'inizio, prima del message. Allora ho fatto lo stesso: in cima
al file Student.proto ho aggiunto un package creato da me, ovvero proto.classes (è il primo
nome che mi è venuto in mente).
7) ho fatto Build -> Rebuild Project, e mi ha creato correttamente, su
build/generated/source/proto/main/java, il package proto.classes con la classe StudentOuterClass.
8) nel file in cui volevo usare questa classe, che nel mio caso era UniversityServer, ho fatto l'import di
"import proto.classes.StudentOuterClass.Student;". è il ".Student" finale che mi ha permesso di usare
direttamente la classe Student nel file.
9) yeah.

Nel caso di grpc, invece, c'era un altro errore quando facevo la rebuild del progetto. L'ho risolto aggiungendo:

implementation 'javax.annotation:javax.annotation-api:1.3.2'

nelle dependencies {} del build.gradle


Suggerimento di Andrea: "aggiungerei anche l'uso di "Invalidate Caches" nel caso in cui non vengano generate le classi/file"


--------------------------------------------------------------------------------------------------------------------


Guida grpc (SumService nel caso generale verrà rimpiazzato dal nome del servizio scelto da te):
1) definisci nel tuo file proto (SumService.proto nel mio caso) il formato dei messaggi e dei servizi.
In cima inoltre scrivi syntax = "proto3"; , così, per sport. Also ricordati il nome del package.
2) rebuilda il progetto e spera che non ti dia problemi.
3) se hai definito il servizio SumService, scrivi una classe SumServiceImpl che estende la classe SumServiceImplBase
(in questo caso, nel farlo, mi ha importato automaticamente nella classe it.generated.sumservice.SumServiceGrpc;)
4) fai l'override dei vari metodi della classe (quelli che hai definito nel file proto). Ricorda che, in ogni caso,
questi metodi hanno, come secondo argomento, uno "StreamObserver<MessaggioDiRitorno> responseObserver", su cui poi
andranno chiamati dei metodi per mandare il messaggio al client.
5) leggi l'oggetto marshallato mandato dal client come meglio credi e poi costruisci un MessaggioDiRitorno "m".
6a) supponendo che il servizio sia one-to-one, fai, per mandare il messaggio al client:
-responseObserver.onNext(m);	//passa la risposta nello stream
-responseObserver.onCompleted();  //completa e chiude la comunicazione
6b) se invece è un servizio one-to-stream è la stessa cosa, solo che prima di chiamare onCompleted() chiamerai più volte onNext(m), ogni volta con un
messaggio m diverso (o uguale, dipende dall'applicazione).
6c) se invece è un servizio stream-to-stream, leggi il codice, ora non c'è ho voglia di spiegare anche quello lol.



Lato client, per poter comunicare col servizio remoto, sappi innanzitutto che hai due modalità di comunicazione:
-sincrona
-asincrona
Vediamole insieme
SINCRONA
1) definisci un metodo synchronousCall() (non è necessario, solo così si capisce meglio)
2) dentro definisci innanzitutto un canale di comunicazione bloccante, specificando l'host e la porta del servizio
richiesto. In codice: "[final] ManagedChannel channel = ManagedChannelBuilder.forTarget("localhost:8080").usePlaintext().build();"
"localhost:8080" può essere rimpiazzato ovviamente con qualunque nome di host e porta.
3) ottieni la stub bloccante sul channel con: "SumServiceBlockingStub stub = SumServiceGrpc.newBlockingStub(channel);"
4) crea la tua richiesta e mandala al client sullo specifico metodo richiesto.
"ClientRequestIntegersToSum req = ClientRequestIntegersToSum.newBuilder().setN1(10).setN2(20).build();
 ServerResponseInteger res = stub.oneToOneSum(req);"
5) chiudi il channel: "channel.shutdown();"
ASINCRONA
1) definisci un metodo asynchronousStreamCall()
2) di nuovo, definisci il channel: "[final] ManagedChannel channel = ManagedChannelBuilder.forTarget("localhost:8080").usePlaintext().build();"
3) crea la stub, solo che stavolta sarà asincrona. Per farlo: "SumServiceStub stub = SumServiceGrpc.newStub(channel);"
4) non resta altro che chiamare il servizio sulla stub. Tuttavia è necessario, dato che vogliamo ricevere uno stream di risposte,
registrare una callback lato client. Per farlo:

	stub.oneToStreamSum(req, new StreamObserver<ServerResponseInteger>(){

            //"this handler takes care of each item received in the stream"
            @Override
            public void onNext(ServerResponseInteger value) {
                System.out.println("n1 + n2 = " + value.getRes() );
            }

            //"if there are some errors, this method will be called"
            @Override
            public void onError(Throwable t) {
                System.out.println("Error! " + t.getMessage());
            }

            //"When the stream is completed (the server called "onCompleted") just close the channel
            @Override
            public void onCompleted() {
                channel.shutdownNow();
            }
        });

        channel.awaitTermination(10, TimeUnit.SECONDS);



Lato server, invece, per istanziare il servizio:
1) crea una classe MyServer (NON chiamarla Server: sennò hai conflitto quando usi la classe io.grpc.Server)
2) lancia nel main (o in un metodo) un servizio con:
"Server serverService = ServerBuilder.forPort(8080).addService(new SumServiceImpl()).build();
 serverService.start();
 serverService.awaitTermination();"
Anche qui ovviamente puoi cambiare la porta.







